###1. 描述
####1.1 回顾下题目
>爱因斯坦台阶问题，有一台阶，  
二二之数余一，三三之数余二，  
四四之数余三，五五之数余四，  
六六之数余五，七七数则恰巧，问台阶数几何？

####1.2 回顾下解题思路
假设台阶数为正整数 x , 则 x 满足下面的所有的等式。
> x % 2 = 1  
x % 3 = 2  
x % 4 = 3 		
x % 5 = 4  
x % 6 = 5 		
x % 7 = 0

其中任意的 2 个等式都能合并成一个，比如
> x % 2 = 1 		
x % 3 = 2

等价于 
> x % 6 = 5

最终，所有的 6 个等式 2 个  2 个的可以合并为一个等式
> X % A = B.

X  的值可以如表述，就解出了 X 的值。
>X = A * i + B (i=0, 1, 2, ...)

####1.3 main method 要做的事情
之前的 s4-2.3 Smali Code 的 1、2、3、4 里，  一是定义了一个 class Formular 可以描述需要使用的算式
> X % A = B .

二是定义了一个 Method 可以合并 2 个算式，并返回合并后的算式。
	private static Formular mergeTwoFormulars(Formular f1, Formular f2)

那么 main method 要做的事情就是  
（1）初始化 6 个算式  
（2）合并 6 个算式为 1 个  
（3）输出最终结果  

###2. Main Method
####2.1 Initial value
#####2.1.1 smali code

    .prologue
    const/4 v7, 0x4

    const/4 v4, 0x3

    const/4 v5, 0x2

    const/4 v1, 0x1

    const/4 v6, 0x0

    .line 7
    const/4 v0, 0x6

    new-array v3, v0, [LFormular;

    .line 9
    new-instance v0, LFormular;

    invoke-direct {v0, v5, v1}, LFormular;-><init>(II)V

    aput-object v0, v3, v6

    .line 10
    new-instance v0, LFormular;

    invoke-direct {v0, v4, v5}, LFormular;-><init>(II)V

    aput-object v0, v3, v1

    .line 11
    new-instance v0, LFormular;

    invoke-direct {v0, v7, v4}, LFormular;-><init>(II)V

    aput-object v0, v3, v5

    .line 12
    new-instance v0, LFormular;

    const/4 v2, 0x5

    invoke-direct {v0, v2, v7}, LFormular;-><init>(II)V

    aput-object v0, v3, v4

    .line 13
    new-instance v0, LFormular;

    const/4 v2, 0x6

    const/4 v4, 0x5

    invoke-direct {v0, v2, v4}, LFormular;-><init>(II)V

    aput-object v0, v3, v7

    .line 14
    const/4 v0, 0x5

    new-instance v2, LFormular;

    const/4 v4, 0x7

    invoke-direct {v2, v4, v6}, LFormular;-><init>(II)V

    aput-object v2, v3, v0

会使用到的数值有 0 - 7 ，它们最初被初始化到像 v0 这样的寄存器中。  
然后初始化一个 6 个元素的 Formular 数组，再初始化每个值。  
把 smali 代码翻译到 x % 2 = 1 的为止，后面的 5 个都是一样。
#####2.1.2 伪代码

	v7 = 4;
	v4 = 3;
	v5 = 2;
	v1 = 1;
	v6 = 0;
	v0 = 6;

	Formular[] v3 = new Formular[6];

	v0 = new Formular(v5, v1); //  new Formular(2, 1);
	v3[v6] = v0;	// v3[0] = v0;

	v3[1] = new Formular(3,2);
	v3[2] = new Formular(4,3);
	v3[3] = new Formular(5,4);
	v3[4] = new Formular(6,5);
	v3[5] = new Formular(7,0);

####2.2 合并 6 个算式为 1 个
#####2.2.1 smali code

    .line 16
    aget-object v0, v3, v6

    move-object v2, v0

    move v0, v1

    .line 17
    :goto_3b
    const/4 v4, 0x6

    if-ge v0, v4, :cond_47

    .line 18
    aget-object v4, v3, v0

    invoke-static {v2, v4}, LeinsteinSteps;->mergeTwoFormulars(LFormular;LFormular;)LFormular;

    move-result-object v2

    .line 17
    add-int/lit8 v0, v0, 0x1

    goto :goto_3b

    .line 20
    :cond_47
	# print info of v2
#####2.2.2 初步伪代码

	Formular v0 = v3[v6]; //v6 = 0;
	Formular v2 = v0;
	int v0 = v1; // v1 = 1;

	:goto_3b
	v4 = 6;
	
	if(v0 >= v4)
		goto :cond_47; // print info
	
	Formular v4 = v3[v0]; // v0 =1
	v2 = einsteinSteps.mergeTwoFormulars(v2, v4);

	v0 ++;
	goto :goto_3b

	:cond_47
	#print_info of XXX

##### 2.2.3 整理后的伪代码

	Formular v2 = v3[0];
	int v0 = 1;

	while(v0 < 6)
	{
		v2 = einsteinSteps.mergeTwoFormulars(v2, v3[v0]);

		v0 ++;
	}

#### 2.3 Print Info of a Formulars
class Formualr 描述算式
> X % A = B 

满足上式的所有 X 可以组成一个等差数列，B 为首项，A 为公差。
所以 X 也可以做如下描述，就是我们要求的值。
> X = A * i + B 

#####2.3.1 smali code

    sget-object v0, Ljava/lang/System;->out:Ljava/io/PrintStream;

    const-string v3, "The result is an integer: %d*i + %d (i=0, 1, 2...)\n"

    new-array v4, v5, [Ljava/lang/Object;

    iget v5, v2, LFormular;->divisor:I

    invoke-static {v5}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;

    move-result-object v5

    aput-object v5, v4, v6

    iget v2, v2, LFormular;->remainder:I

    invoke-static {v2}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;

    move-result-object v2

    aput-object v2, v4, v1

    invoke-virtual {v0, v3, v4}, Ljava/io/PrintStream;->printf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;

    .line 21
    return-void
#####2.3.2 原始伪代码
	
	v0 = new (java.io.PrintStream) java.lang.System.out;
	v3 = String("The result is an integer: %d*i + %d (i=0, 1, 2...)\n";

	Object[] v4 = new Object[v5]; // v5 = 2;
	int v5 = v2.divisor;
	Integer v5 = Integer.valueOf(v5);
	v4[v6] = v5; // v6 = 0;

	int v2 = v2.remainder;
	Integer v2 = Integer.valueOf(v2);
	v4[v1] = v2; // v1 = 1

	v0.printf(v3, v4);

	return void;

#####2.3.3 整理后的伪代码
	
	System.out.printf("The result is an integer: %d*i + %d (i=0, 1, 2...)\n", v2.divisor, v2.remainder);





