###1. Exercise
Print [Palscal's angle](http://en.wikipedia.org/wiki/Pascal%27s_triangle) for given lines, like below:

>$ Input lines(max 34):  
9 
 
                     1  
                   1   1  
                 1   2   1  
               1   3   3   1  
             1   4   6   4   1  
           1   5  10  10   5   1  
         1   6  15  20  15   6   1  
       1   7  21  35  35  21   7   1  
     1   8  28  56  70  56  28   8   1  

###2. Algorithm
####2.1 Algorithm for data.
 
In math, the first line is called row *n=0*, so the line N is actrually described in row *n= N-1* . There is also a combination calculation formular for a cell of Palscal's triangle.    
For values in each element of a line.   
- row n=0, has n+1 = 1 element, whose value is 1.  
- row n, has n+1 elements. 
- When 0<=k<=n, the **k** element in **row n** is described as C(n, k), then
		
> C(n,k) = C(n-1, k-1) + C(n-1, k)  --- 0<=k<=n, n>=0  
C(0,0) = 1  

####2.2 Algorithm for printing
The key of printing Palscal's Thiangle is to add some blanks between each element.
The space ouppied by each Element is based on the digits of max number, which is **C(n, n/2)**. When line N = 9, outputs are below. character '#' and '=' is actually ' ' that is element of blank.  
>
    ##################=1  
    ################=1  =1  
    ##############=1  =2  =1  
    ############=1  =3  =3  =1  
    ##########=1  =4  =6  =4  =1  
    ########=1  =5  10  10  =5  =1  
    ######=1  =6  15  20  15  =6  =1  
    ####=1  =7  21  35  35  21  =7  =1  
    ##=1  =8  28  56  70  56  28  =8  =1  
  
Each element has two digits. The first number is 1, so add one blank (here is translated to '=' so as to distinguish other blanks. It is ' ' in Java Code). Added blank in each element is calculated by 
> Added blanks = Digits of MaxNumber - Digits of CurrentNumber**

Then calculate layout based on print element.

- Firstly print the blanks ahead each line. here is N-i '#' print elements.
- Secondly print  { number elemet + Blank element} for **i** times.
    - Blank Element, If maxNumber is 70, then Blank Element has 2 ' ' characters. If the max is 100, then it Blank Element has 3 ' ' characters.
    - Number Element, If max number is 70 and the first line is 1, Number element is 1 ' ' character before digit 1 of the first number of first line. If max number is 100, then Number element is  2 ' ' characters before digit 1.
    
###3. Smali code analyzing
####3.1 class PascalsTriangle
There is 1 field **ElementLength** and 5 methods in class PascalsTriangle.

	.class public LPascalsTriangle;
	.super Ljava/lang/Object;
	.source "PascalsTriangle.java"

	# static fields
	.field private static ElementLength:I

	# direct methods
	
	.method public constructor <init>()V
	.end method
	
	.method private static DigitLength(I)I
	.end method
	
	.method private static binomialCoefficient(II)I
	.end method
	
	.method public static main([Ljava/lang/String;)V
	.end method
	
	.method private static printChar(IC)V
	.end method
	
	.method private static printInt(I)V
	.end method
	

####3.2 DigitLength
DigitLength methods returns digits length of input numberal.
#####3.2.1 samli code
	.method private static DigitLength(I)I
		.registers 2

		.prologue
		const/4 v0, 0x0

		:cond_1
		add-int/lit8 v0, v0, 0x1

		div-int/lit8 p0, p0, 0xa

		if-nez p0, :cond_1

		return v0
	.end method
#####3.2.2 pseudo code
	private static int DigitLength(int p0)
	{
		v0 = 0;
		do
		{
			v0 ++;
			p0 /= 10;
		}while(p0 != 0);

		return v0;
	}
####3.3 binomialCoefficient
This method is to calculate C(n, k), which is a binomial coefficient.
The code is a clumzy algorithm. to calculate C(n,k), calaculate all members for C(n-1,),then return C(n-1, k-1) + C(n-1, k).
#####3.3.1 smali code

	.method private static binomialCoefficient(II)I
		.registers 9

		.prologue
		const/4 v1, 0x0

		new-array v3, p0, [I

		new-array v4, p0, [I

		move v0, v1

		:goto_6
		if-ge v0, p0, :cond_f

		aput v1, v4, v0

		aput v1, v3, v0

		add-int/lit8 v0, v0, 0x1

		goto :goto_6

		:cond_f
		move v2, v1

		:goto_10
		if-ge v2, p0, :cond_38

		move v0, v1

		:goto_13
		if-gt v0, v2, :cond_2a

		packed-switch v0, :pswitch_data_3c

		add-int/lit8 v5, v0, -0x1

		aget v5, v3, v5

		aget v6, v3, v0

		add-int/2addr v5, v6

		aput v5, v4, v0

		:goto_21
		add-int/lit8 v0, v0, 0x1

		goto :goto_13

		:pswitch_24
		const/4 v5, 0x1

		aput v5, v4, v0

		aput v5, v3, v0

		goto :goto_21

		:cond_2a
		move v0, v1

		:goto_2b
		if-gt v0, v2, :cond_34

		aget v5, v4, v0

		aput v5, v3, v0

		add-int/lit8 v0, v0, 0x1

		goto :goto_2b

		:cond_34
		add-int/lit8 v0, v2, 0x1

		move v2, v0

		goto :goto_10

		:cond_38
		aget v0, v4, p1

		return v0

		nop

		:pswitch_data_3c
		.packed-switch 0x0
			:pswitch_24
		.end packed-switch
	.end method

#####3.3.2 preliminary pseudo code
	private static int binomialCoefficient(int p0, int p1)
	{
		v1 = 0;
		int[] v3 = new int[p0];
		int[] v4 = new int[p0];

		for(v0=0; v0<p0; v0++)
		{
			v4[v0] = 0;
			v3[v0 = 0;
		}

		for(v2 = 0; v2<p0; v2++)
		{
			for(v0=0; v0<v2; v0++)
			{
				switch(v0)
				{
					case 0:
						v4[v0] = 1;
						v3[v0] = 1;
						break;
						
					default:
						v4[v0] =v3[v0-1] + v3[v0];
						break;
				}
				
			}

			for(v0=0; v0<v2; v0++)
				v3[v0] = v4[v0];
		}

		v0 = v4[p1];
		return v0;
	}
####3.4 printChar
printChar method prints given character for givin times.
@param: int length, the length for ouputs
@param: int char, print this character for length times.
#####3.4.1 smali Code
	.method private static printChar(IC)V
		.registers 8

		.prologue
		const/4 v1, 0x0

		move v0, v1

		:goto_2
		if-ge v0, p0, :cond_17

		sget-object v2, Ljava/lang/System;->out:Ljava/io/PrintStream;

		const-string v3, "%c"

		const/4 v4, 0x1

		new-array v4, v4, [Ljava/lang/Object;

		invoke-static {p1}, Ljava/lang/Character;->valueOf(C)Ljava/lang/Character;

		move-result-object v5

		aput-object v5, v4, v1

		invoke-virtual {v2, v3, v4}, Ljava/io/PrintStream;->printf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;

		add-int/lit8 v0, v0, 0x1

		goto :goto_2

		:cond_17
		return-void
	.end method
#####3.4.2 pseudo-code
	private static void printChar(int p0, char p1)
	{
		v1 = 0;
		for(v0=0; v0 < p0; v0++)
		{
			System.out.printf("%c", p1);
		}
	}
####3.5 printInt
Print  an Integer with some space before it. The length of all of its space is ElementLength.

#####3.5.1 smali code

	.method private static printInt(I)V
		.registers 6

		.prologue
		invoke-static {p0}, LPascalsTriangle;->DigitLength(I)I

		move-result v0

		sget v1, LPascalsTriangle;->ElementLength:I

		sub-int v0, v1, v0

		const/16 v1, 0x3d

		invoke-static {v0, v1}, LPascalsTriangle;->printChar(IC)V

		sget-object v0, Ljava/lang/System;->out:Ljava/io/PrintStream;

		const-string v1, "%d"

		const/4 v2, 0x1

		new-array v2, v2, [Ljava/lang/Object;

		const/4 v3, 0x0

		invoke-static {p0}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;

		move-result-object v4

		aput-object v4, v2, v3

		invoke-virtual {v0, v1, v2}, Ljava/io/PrintStream;->printf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;

		return-void
	.end method
#####3.5.2 pseudo-code
	private static void printInt(int p0)
	{
		int v0 = PascalsTriangle.DigitLength(p0);
		int v1 = PascalsTriangle.ElementLength;

		v0 = v1- v0;
		v1 = 0x3d; ### '=' = 0x3d
		PascalsTiangle.printChar(v0, v1);

		System.out.printf("d", p0);
	}
####3.6 main method
#####3.6.1  smali code

	.method public static main([Ljava/lang/String;)V
		.registers 9

		.prologue
		const/4 v1, 0x0

		sget-object v0, Ljava/lang/System;->out:Ljava/io/PrintStream;

		const-string v2, "Input lines(max 34):"

		invoke-virtual {v0, v2}, Ljava/io/PrintStream;->println(Ljava/lang/String;)V

		new-instance v0, Ljava/util/Scanner;

		sget-object v2, Ljava/lang/System;->in:Ljava/io/InputStream;

		invoke-direct {v0, v2}, Ljava/util/Scanner;-><init>(Ljava/io/InputStream;)V

		invoke-virtual {v0}, Ljava/util/Scanner;->nextInt()I

		move-result v3

		add-int/lit8 v0, v3, -0x1

		div-int/lit8 v2, v3, 0x2

		invoke-static {v0, v2}, LPascalsTriangle;->binomialCoefficient(II)I

		move-result v0

		invoke-static {v0}, LPascalsTriangle;->DigitLength(I)I

		move-result v0

		sput v0, LPascalsTriangle;->ElementLength:I

		new-array v4, v3, [I

		new-array v5, v3, [I

		move v0, v1

		:goto_26
		if-ge v0, v3, :cond_2f

		aput v1, v5, v0

		aput v1, v4, v0

		add-int/lit8 v0, v0, 0x1

		goto :goto_26

		:cond_2f
		move v2, v1

		:goto_30
		if-ge v2, v3, :cond_78

		add-int/lit8 v0, v3, -0x1

		sub-int/2addr v0, v2

		:goto_35
		if-lez v0, :cond_41

		sget v6, LPascalsTriangle;->ElementLength:I

		const/16 v7, 0x23

		invoke-static {v6, v7}, LPascalsTriangle;->printChar(IC)V

		add-int/lit8 v0, v0, -0x1

		goto :goto_35

		:cond_41
		move v0, v1

		:goto_42
		if-gt v0, v2, :cond_65

		packed-switch v0, :pswitch_data_7a

		add-int/lit8 v6, v0, -0x1

		aget v6, v4, v6

		aget v7, v4, v0

		add-int/2addr v6, v7

		aput v6, v5, v0

		:goto_50
		aget v6, v5, v0

		invoke-static {v6}, LPascalsTriangle;->printInt(I)V

		sget v6, LPascalsTriangle;->ElementLength:I

		const/16 v7, 0x20

		invoke-static {v6, v7}, LPascalsTriangle;->printChar(IC)V

		add-int/lit8 v0, v0, 0x1

		goto :goto_42

		:pswitch_5f
		const/4 v6, 0x1

		aput v6, v5, v0

		aput v6, v4, v0

		goto :goto_50

		:cond_65
		move v0, v1

		:goto_66
		if-gt v0, v2, :cond_6f

		aget v6, v5, v0

		aput v6, v4, v0

		add-int/lit8 v0, v0, 0x1

		goto :goto_66

		:cond_6f
		sget-object v0, Ljava/lang/System;->out:Ljava/io/PrintStream;

		invoke-virtual {v0}, Ljava/io/PrintStream;->println()V

		add-int/lit8 v0, v2, 0x1

		move v2, v0

		goto :goto_30

		:cond_78
		return-void

		nop

		:pswitch_data_7a
		.packed-switch 0x0
			:pswitch_5f
		.end packed-switch
	.end method
#####3.6.2 pseudo-code
	public static void main(String[] args)
	{
		v1 = 0;
		System.out.println("Input lines(max 34):");
		
		Scanner v0 = new Scanner(System.in);
		int v3 = v0.nextInt();

		v0 = PascalsTiangle.binomialCoefficient(v3-1, v3/2);
		PascalsTriangle.ElementLength = PascalTriangle.DigitLength(v0);

		int[] v4 = new int[v3];
		int[] v5 = new int[v3];

		for(v0=0; v0<v3; v0++)
		{
			v5[v0] = 0;
			v4[v0] = 0;
		}

		for(v2=0; v2<v3; v2++)
		{
			for(v0=v3-1-v2; v0>0; v0--)
				PascalsTiangle.printChar(ElementLength, '#');
			
			for(v0=0; v0<v2; v0++)
			{
				switch(v0)
				{
					case 0:
						v5[v0] = 1;
						v4[v0] = 1;
						break;
					default:
						v5[v0] = v4[v0-1] + v4[v0];
					break;
				}
				PascalsTriangle.printInt(v5[v0]);
				PascalsTriangle.printChar(Elementlength, ' ');

				for(v0=0; v0<v2; v0++)
					v4[v0] = v5[v0];

				System.out.println();
			}
			
		}
		return void;
	}
