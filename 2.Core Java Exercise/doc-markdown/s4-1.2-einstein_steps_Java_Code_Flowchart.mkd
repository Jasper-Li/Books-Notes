<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
### 1. 练习题
爱因斯坦台阶问题，有一台阶，  
二二之数余一，三三之数余二，  
四四之数余三，五五之数余四，  
六六之数余五，七七数则恰巧，问台阶数几何？

### 2. 解题
假设台阶数为正整数 x , 则 x 满足下面的所有的等式。
> x % 2 = 1  
x % 3 = 2  
x % 4 = 3 		
x % 5 = 4  
x % 6 = 5 		
x % 7 = 0

其中任意的 2 个等式都能合并成一个，比如
> x % 2 = 1 		
x % 3 = 2

等价于 
> x % 6 = 5

而此时 x 的值可以表述为
> x = 6*i + 5  (i=0, 1, 2, ...)

其中 6 是 2 和 3 的最小公倍数， 5 可以通过上一节 s4-2.1-einstein_steps_algorithm.mkd 的算法计算出来。

综上，所有的 6 个等式 2 个  2 个的最终合并为一个等式
> X % A = B.

X  的值可以如表述，就解出了 X 的值。
>X = A * i + B (i=0, 1, 2, ...)

### 3. 两个等式合并成一个的流程
若
> x % A1 = B1 ---(1)  
> x % A2 = B2 ---(2)

可以合并成 
> x % A3 = B3

其中 A3 是 A1 和 A2 的最小公倍数， B3 的算法在 s4-2.1-einstein_steps_algorithm.mkd 里有介绍，流程如下：

1.  满足公式 （1） 的数组 array1 长度为 A3/A1, 值分别为
> B1, B1+A1, B1+A1\*2, B1+A1\*3, ...

2. 满足公式 （2） 的数组 array2 长度为 A3/A2, 值分别为
> B2, B2+A2, B2+A2\*2, B2+A2\*3, ...

3. 两个数组中第一个出现的相同的值就是 B3。

例如合并 x % 2 = 1 和 x % 3 = 2 两个 。

1. 2 和 3 的最小公倍数为 6
2. 满足 x % 2 = 1 的数组 array1 长度为 6 / 2 = 3, 值分别为
> 1, 3, 5  

3. 满足 x % 3 = 2 的数组 array2 长度为 6 / 3 = 2，值分别为
> 2, 5

4. 两个数组中第一个相同的值是 5。 所以等式 x % 2 = 1 和 x % 3 = 2, 可以合并为 x % 6 = 5 。


### 4. 完整的 Java Code

	import java.util.*;

	public class einsteinSteps
	{
		public static void main(String[] args)
		{
			Formular[] param = new Formular[6];

			param[0] = new Formular(2,1);
			param[1] = new Formular(3,2);
			param[2] = new Formular(4,3);
			param[3] = new Formular(5,4);
			param[4] = new Formular(6,5);
			param[5] = new Formular(7,0);
			
			Formular result = param[0];
			for(int i = 1; i<6;i++)
				result=mergeTwoFormulars(result, param[i]);

			System.out.printf("The result is an integer: %d*i + %d (i=0, 1, 2...)\n", result.divisor, result.remainder);
		}
		/**
		 * Get the greatest common divisor.
		 */
		private static int GCD(int dividend, int divisor)
		{
			while(divisor != 0)
			{
			int temp = dividend % divisor;
			dividend = divisor;
			divisor = temp;

			}
			return dividend;
		}
		/**
		 * Get the least common mutliple.
		 */
		private static int LCM(int num1, int num2)
		{
			return num1 * num2 / GCD(num1, num2);
		}

		/**
		 * Get Array to match the needs. If A % B = C, get an array of A with given length.
		 */
		
		private static int[] getArray(int dividend, int divisor, int length)
		{
			int[] array = new int[length];
			
			for( int i=0; i< array.length; i++)
				array[i] = divisor + dividend * i;

			return array;
		}

		/**
		 * Print an integer array.
		 */
		private static void printArray(int[] array)
		{
			for (int i=0; i<array.length; i++)
				System.out.println(i+1 +": " +  array[i]);
			System.out.println();
		}

		/**
		 * Merge 2 fomulars into 1 formular, just like below.
		 * If 
		 * 1. x % 3 = 2
		 * 2. x % 5 = 3
		 * Then x % 15 = 8 .
		 */
		private static Formular mergeTwoFormulars(Formular f1, Formular f2)
		{
			Formular result = new Formular();

			result.divisor = LCM(f1.divisor, f2.divisor);
			int length = result.divisor / f1.divisor;
			int[]array1 = getArray(f1.divisor, f1.remainder, length);

			length = result.divisor / f2.divisor;
			int[]array2 = getArray(f2.divisor, f2.remainder, length);

			int remainder=0;
			for(int i=0; i<array1.length; i++)
			{
				for(int j=0; j<array2.length; j++)
				{
					
					if(array1[i] == array2[j])
					{		remainder = array1[i];
							break;
					}
					if(array1[i] < array2[j])
						break;
				}

				if(remainder !=0 )
					break;
			}
			result.remainder =remainder;

			return result;
		
		}
	}

	/**
	 *  A % B = C.
	 * The class describe B and C. so A is 
	 * A = B * i + C (i = 0, 1, 2, ...)
	 */
	class Formular
	{
		int divisor;
		int remainder;

		public Formular(int d, int r)
		{
			divisor = d;
			remainder = r;
		}

		public Formular()
		{
			divisor = 0;
			remainder = 0;
		}
	}

